y = bind_rows(
read.delim("test/y_test.txt", sep = "", col.names = c("activity.code"), header = FALSE),
read.delim("train/y_train.txt", sep = "", col.names = c("activity.code"), header = FALSE)
)
write.csv(y, "output/y2.csv")
?merge
y2 = merge(y, activity_labels, by = "activity.code")
View(y2)
y2 = merge(y, activity_labels, by = "activity.code", sort = F)
View(Test_set)
source("/Users/evgeny/sourceCode/DataScientistCourse/course3/week4/ds_course3_week4/run_analysis.R")
run_analysis()
warnings()
run_analysis()
run_analysis()
rm(list = ls())
features = read.delim("features.txt", sep = " ", col.names = c("number", "name"), header = FALSE)
# Convert the feature names into appropriate format for using them as column names
## replace "(", ")", "." by "_"
features[,"name"] = gsub("[(),-]", ".", features[,"name"])
## replace all blocks of several dots by one dot
features[,"name"] = gsub("[.]{2,}", ".", features[,"name"])
## replace final dots
features[,"name"] = gsub("[.]?$", "", features[,"name"])
X = bind_rows(
read.delim("test/X_test.txt", sep = "", col.names = features[,"name"], header = FALSE),
read.delim("train/X_train.txt", sep = "", col.names = features[,"name"], header = FALSE)
)
## bind "y" sets
y = bind_rows(
read.delim("test/y_test.txt", sep = "", col.names = c("activity.code"), header = FALSE),
read.delim("train/y_train.txt", sep = "", col.names = c("activity.code"), header = FALSE)
)
## bind "subject_test" sets
subject = bind_rows(
read.delim("test/subject_test.txt", col.names = c("subject"), header = FALSE),
read.delim("train/subject_train.txt", col.names = c("subject"), header = FALSE)
)
X1 = select(X, grep(".mean|.std", names(X), value = TRUE))
View(X)
View(X1)
X = select(X, grep(".mean|.std", names(X), value = TRUE))
activity_labels = read.delim("activity_labels.txt", sep = "", col.names = c("activity.code", "activity.name"), header = FALSE)
y1 = merge(y, activity_labels, by = "activity.code", sort = F)
View(y)
View(y1)
y = merge(y, activity_labels, by = "activity.code", sort = F)
tmp = bind_cols(y, subject, X) %>% group_by(activity.code, subject)
View(tmp)
View(subject)
View(y)
means_activity_subject = bind_cols(y, subject, X) %>% group_by(activity.code, subject) %>% summarise_all(funs(mean))
?summarise_all
?summarise
summarise(tmp, mean(names[]))
summarise(tmp, mean(names))
?summarise_all
means_activity_subject = bind_cols(y, subject, X) %>% group_by(activity.code, subject) %>% summarise_all(funs(mean), na.rm = TRUE)
means_activity_subject = bind_cols(y, subject, X) %>% group_by(activity.code, subject) %>% summarise_if(is.numeric, mean, na.rm = TRUE)
View(means_activity_subject)
View(means_activity_subject)
tmp = bind_cols(y, subject, X)
write.csv(tmp, "output/tmp.csv")
View(tmp)
sum(tmp["subject"]*tmp["activity.code"])
sum(tmp["subject"])
sum(tmp["activity.code"])
tmp2 = mutate(tmp, i=1:10299)
View(tmp2)
tmp2 = mutate(tmp, i=1:10299, subject_i=i*subject)
sum(tmp2["subject_i"])
tmp2 = mutate(tmp, i=1:10299, activity_i=i*activity_code)
tmp2 = mutate(tmp, i=1:10299, activity_i=i*activity.code)
sum(tmp2["activity_i"])
y = bind_rows(
read.delim("test/y_test.txt", sep = "", col.names = c("activity.code"), header = FALSE),
read.delim("train/y_train.txt", sep = "", col.names = c("activity.code"), header = FALSE)
)
tmp2 = mutate(y, i=1:10299, activity_i=i*activity.code)
sum(tmp2["activity_i"])
y2 = merge(y, activity_labels, by = "activity.code", sort = F)
y2 = merge(y, activity_labels, by = "activity.code", sort = F)
tmp2 = mutate(y, i=1:10299, activity_i=i*activity.code)
sum(mutate(y, i=1:10299, activity_i=i*activity.code)["activity_i"])
sum(mutate(y2, i=1:10299, activity_i=i*activity.code)["activity_i"])
?merge
sum(y["activity_i"])
sum(y["activity"])
sum(y["activity.code"])
sum(y2["activity.code"])
sum(mutate(merge(y, activity_labels, by = "activity.code", sort = F), i=1:10299, activity_i=i*activity.code)["activity_i"])
sum(mutate(merge(y, activity_labels, by = "activity.code", sort = F, all.x = all), i=1:10299, activity_i=i*activity.code)["activity_i"])
sum(mutate(merge(y, activity_labels, by = "activity.code", sort = F, all.x = T), i=1:10299, activity_i=i*activity.code)["activity_i"])
sum(mutate(merge(y, activity_labels, by = "activity.code", sort = F, all = T), i=1:10299, activity_i=i*activity.code)["activity_i"])
sum(mutate(merge(y, activity_labels, by.x = "activity.code", sort = F, all = T), i=1:10299, activity_i=i*activity.code)["activity_i"])
sum(mutate(merge(y, activity_labels, by.y = "activity.code", sort = F, all = T), i=1:10299, activity_i=i*activity.code)["activity_i"])
View(y2)
View(y)
View(y1)
View(y2)
write.csv(y2, "output/y2.csv")
?join
y = left_join(y, activity_labels, by = "activity.code")
sum(mutate(merge(y, activity_labels, by.y = "activity.code", sort = F, all = T), i=1:10299, activity_i=i*activity.code)["activity_i"])
View(y)
View(y)
sum(mutate(y, i=1:10299, activity_i=i*activity.code)["activity_i"])
features = read.delim("features.txt", sep = " ", col.names = c("number", "name"), header = FALSE)
# Convert the feature names into appropriate format for using them as column names
## replace "(", ")", "." by "_"
features[,"name"] = gsub("[(),-]", ".", features[,"name"])
## replace all blocks of several dots by one dot
features[,"name"] = gsub("[.]{2,}", ".", features[,"name"])
## replace final dots
features[,"name"] = gsub("[.]?$", "", features[,"name"])
# Merge the training and the test sets to create one data set
# Appropriately label the data set with descriptive variable names
## bind "x" sets
X = bind_rows(
read.delim("test/X_test.txt", sep = "", col.names = features[,"name"], header = FALSE),
read.delim("train/X_train.txt", sep = "", col.names = features[,"name"], header = FALSE)
)
## bind "y" sets
y = bind_rows(
read.delim("test/y_test.txt", sep = "", col.names = c("activity.code"), header = FALSE),
read.delim("train/y_train.txt", sep = "", col.names = c("activity.code"), header = FALSE)
)
## bind "subject_test" sets
subject = bind_rows(
read.delim("test/subject_test.txt", col.names = c("subject"), header = FALSE),
read.delim("train/subject_train.txt", col.names = c("subject"), header = FALSE)
)
# Extract only the measurements on the mean and standard deviation for each measurement.
## leave only columns containing ".mean" and "\.std"
X = select(X, grep(".mean|.std", names(X), value = TRUE))
# Uses descriptive activity names to name the activities in the data set
# Replace numerical values in y by their descriptive names
activity_labels = read.delim("activity_labels.txt", sep = "", col.names = c("activity.code", "activity.name"), header = FALSE)
y = left_join(y, activity_labels, by = "activity.code")
# Create a second, independent tidy data set
# with the average of each variable for each activity and each subject.
## - merge x, y, and subject into one set,
## - group by "activity.name" and "subject",
## - sumarize with mean for all columns
means_activity_subject = bind_cols(y, subject, X) %>% group_by(activity.code, subject) %>% summarise_all(funs(mean), na.rm = TRUE)
View(means_activity_subject)
View(means_activity_subject)
View(y)
rm(list = ls())
features = read.delim("features.txt", sep = " ", col.names = c("number", "name"), header = FALSE)
# Convert the feature names into appropriate format for using them as column names
## replace "(", ")", "." by "_"
features[,"name"] = gsub("[(),-]", ".", features[,"name"])
## replace all blocks of several dots by one dot
features[,"name"] = gsub("[.]{2,}", ".", features[,"name"])
## replace final dots
features[,"name"] = gsub("[.]?$", "", features[,"name"])
# Merge the training and the test sets to create one data set
# Appropriately label the data set with descriptive variable names
## bind "x" sets
X = bind_rows(
read.delim("test/X_test.txt", sep = "", col.names = features[,"name"], header = FALSE),
read.delim("train/X_train.txt", sep = "", col.names = features[,"name"], header = FALSE)
)
## bind "y" sets
y = bind_rows(
read.delim("test/y_test.txt", sep = "", col.names = c("activity.code"), header = FALSE),
read.delim("train/y_train.txt", sep = "", col.names = c("activity.code"), header = FALSE)
)
## bind "subject_test" sets
subject = bind_rows(
read.delim("test/subject_test.txt", col.names = c("subject"), header = FALSE),
read.delim("train/subject_train.txt", col.names = c("subject"), header = FALSE)
)
# Extract only the measurements on the mean and standard deviation for each measurement.
## leave only columns containing ".mean" and "\.std"
X = select(X, grep(".mean|.std", names(X), value = TRUE))
# Uses descriptive activity names to name the activities in the data set
# Replace numerical values in y by their descriptive names
activity_labels = read.delim("activity_labels.txt", sep = "", col.names = c("activity.code", "activity.name"), header = FALSE)
y = left_join(y, activity_labels, by = "activity.code")
# Create a second, independent tidy data set
# with the average of each variable for each activity and each subject.
## - merge x, y, and subject into one set,
## - group by "activity.name" and "subject",
## - sumarize with mean for all columns
means_activity_subject = bind_cols(y, subject, X) %>% group_by(activity.code, subject) %>% summarise_all(funs(mean), na.rm = TRUE)
View(y)
View(X)
View(means_activity_subject)
l = bind_cols(y, subject, X)
View(l)
rm(list = ls())
features = read.delim("features.txt", sep = " ", col.names = c("number", "name"), header = FALSE)
# Convert the feature names into appropriate format for using them as column names
## replace "(", ")", "." by "_"
features[,"name"] = gsub("[(),-]", ".", features[,"name"])
## replace all blocks of several dots by one dot
features[,"name"] = gsub("[.]{2,}", ".", features[,"name"])
## replace final dots
features[,"name"] = gsub("[.]?$", "", features[,"name"])
# Merge the training and the test sets to create one data set
# Appropriately label the data set with descriptive variable names
## bind "x" sets
X = bind_rows(
read.delim("test/X_test.txt", sep = "", col.names = features[,"name"], header = FALSE),
read.delim("train/X_train.txt", sep = "", col.names = features[,"name"], header = FALSE)
)
## bind "y" sets
y = bind_rows(
read.delim("test/y_test.txt", sep = "", col.names = c("activity.code"), header = FALSE),
read.delim("train/y_train.txt", sep = "", col.names = c("activity.code"), header = FALSE)
)
## bind "subject_test" sets
subject = bind_rows(
read.delim("test/subject_test.txt", col.names = c("subject"), header = FALSE),
read.delim("train/subject_train.txt", col.names = c("subject"), header = FALSE)
)
# Extract only the measurements on the mean and standard deviation for each measurement.
## leave only columns containing ".mean" and "\.std"
X = select(X, grep(".mean|.std", names(X), value = TRUE))
# Uses descriptive activity names to name the activities in the data set
# Replace numerical values in y by their descriptive names
activity_labels = read.delim("activity_labels.txt", sep = "", col.names = c("activity.code", "activity.name"), header = FALSE)
y = left_join(y, activity_labels, by = "activity.code")
# Create a second, independent tidy data set
# with the average of each variable for each activity and each subject.
## - merge x, y, and subject into one set,
## - group by "activity.name" and "subject",
## - sumarize with mean for all columns
means_activity_subject = bind_cols(y, subject, X) %>% group_by(activity.code, activity.name, subject) %>% summarise_all(funs(mean), na.rm = TRUE)
View(means_activity_subject)
source("/Users/evgeny/sourceCode/DataScientistCourse/course3/week4/ds_course3_week4/run_analysis.R")
rm(list = ls())
run_analysis()
source("/Users/evgeny/sourceCode/DataScientistCourse/course3/week4/ds_course3_week4/run_analysis.R")
run_analysis()
source("/Users/evgeny/sourceCode/DataScientistCourse/course3/week4/ds_course3_week4/run_analysis.R")
run_analysis()
r = read.delim("test/X_test.txt", sep = "", col.names = features[,"name"], header = FALSE),
r = read.delim("test/X_test.txt", sep = "", col.names = features[,"name"], header = FALSE)
features = read.delim("features.txt", sep = " ", col.names = c("number", "name"), header = FALSE)
features[,"name"] = gsub("[(),-]", ".", features[,"name"])
features[,"name"] = gsub("[.]{2,}", ".", features[,"name"])
features[,"name"] = gsub("[.]?$", "", features[,"name"])
r = read.delim("test/X_test.txt", sep = "", col.names = features[,"name"], header = FALSE)
point(r[1])
plot(r[1])
plot(r[1],r[2])
?plot
View(r)
plot(r[[1]],r[[2]])
hist(r[[1]])
?hist
hist(r[[1]], freq=100)
hist(r[[1]], freq=100)
columns(r)
colnames(r)
colnames(r)[1]
colnames(r)[1]='a'
colnames(r)[2]='b'
with(r, hist(a)
)
with(r, hist(b))
boxplot(r[1])
boxplot(r[2])
?boxplot
lines(r[1])
lines(r[1])
?lines
lines(r[1], r[2])
lines(r[[1]], r[[2]])
d= lm(r[[1]], r[[2]])
d= lm(r[[1]] ~ r[[2]])
d
abline(d)
par(mfrow=c(1,2))
abline(d)
abline(d)
abline(d)
lines(r[[1]], r[[2]])
boxplot(r[1])
abline(d)
plot()
plot(r[[1]])
abline(d)
plot(r[[1]], r[[2]])
abline(d)
par(mfrow=c(1,2))
rm (list = ls())
par(mfrow=c(1,2))
par(mfrow=c(1,2))
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
plot(ppm, col="blue")
boxplot(ppm,col="blue")
abline(12)
abline(h=12)
hist(ppm)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=12,lwd=2)
abline(v=median(ppm),lwd=2)
abline(v=median(ppm),col="magenta")
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot(y ~ x, data = pollution, col="red")
boxplot(pm25 ~ region, data = pollution, col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
subset(pollution, region=="east")
east <- subset(pollution, region=="east")
head(east)
hist(hist$pm25, col="green")
hist(pm25, col="green")
hist(east$pm25, col="green")
hist(subset(pollution, region=="east")$pm25, col="west")
hist(subset(pollution, region=="east"), col="west")
hist(subset(pollution, region=="east")["pm25"], col="west")
hist(subset(pollution, region=="west")["pm25"], col="green")
hist(hist$pm25, col="green")
hist(east$pm25, col="green")
hist(subset(pollution,region=="west")$pm25, col = "green")
with(pollution, plot())
with(pollution, plot(latitude, pm25))
abline(h=12)
abline(h = 12, lwd = 2, lty = 2)
abline(h = 12, lwd = 2, lty = 2, col=pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4,
| 2, 1))
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region="west")
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25 (y-axis), main = "West")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
plot(faithful)
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist()))
with(cars, plot(speed, dist)
)
text(mean(cars$speed), max(cars$dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout= c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout= c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy,data=mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality, plot)
with(airquality, plot())
with(airquality, plot(Wind, Ozone))
title("Ozone and Wind in New York City")
par()
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone)
plot(airquality$Wind, type="n",airquality$Ozone)
title(main="Wind and Ozone in NYC")
may<-5
may <- subset(airquality, Month==5)
plot(may)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month==5)
notmay <- subset(airquality, Month!=5)
notmay <- subset(airquality, Month!=5)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v=median(airquality$Wind),lty=2,lwd=2)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind").
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
?par
source("/Users/evgeny/sourceCode/DataScientistCourse/course4/ExData_Plotting1/plot1.R")
rm(list = ls())
source("/Users/evgeny/sourceCode/DataScientistCourse/course4/ExData_Plotting1/plot1.R")
View(head(data))
source("/Users/evgeny/sourceCode/DataScientistCourse/course4/ExData_Plotting1/plot1.R")
View(head(data))
source("/Users/evgeny/sourceCode/DataScientistCourse/course4/ExData_Plotting1/plot1.R")
View(data)
source("/Users/evgeny/sourceCode/DataScientistCourse/course4/ExData_Plotting1/plot1.R")
View(data)
?sqldf
?sqldf
source("/Users/evgeny/sourceCode/DataScientistCourse/course4/ExData_Plotting1/plot1.R")
source("/Users/evgeny/sourceCode/DataScientistCourse/course4/ExData_Plotting1/plot1.R")
View(data)
source("/Users/evgeny/sourceCode/DataScientistCourse/course4/ExData_Plotting1/plot1.R")
View(data)
source("/Users/evgeny/sourceCode/DataScientistCourse/course4/ExData_Plotting1/plot1.R")
View(data)
source("/Users/evgeny/sourceCode/DataScientistCourse/course4/ExData_Plotting1/plot1.R")
class()data
class(data)
data[,"Date"]=as.POSIXct(data[,"Date"])
data[,"Date"]=dmy(data[,"Date"])
source("/Users/evgeny/sourceCode/DataScientistCourse/course4/ExData_Plotting1/plot1.R")
View(data)
source("/Users/evgeny/sourceCode/DataScientistCourse/course4/ExData_Plotting1/plot1.R")
View(data)
mean(data[,"Global_active_power"])
mean(data[[,"Global_active_power"]])
sum(data[,"Global_active_power"])
mean(data[,"Global_active_power"])
hist(data[,"Global_active_power"])
hist(data[,"Global_active_power"], xlab = "Global Active Power (kilowatts)")
hist(data[,"Global_active_power"], xlab = "Global Active Power (kilowatts)")
title(main="Global Active Power")
hist(data[,"Global_active_power"], xlab = "Global Active Power (kilowatts)")
title(main="Global Active Power")
hist(data[,"Global_active_power"], xlab = "Global Active Power (kilowatts)", main = "Global Active Power")
hist(data[,"Global_active_power"], xlab = "Global Active Power (kilowatts)", main = "Global Active Power", max_width(480))
hist(data[,"Global_active_power"], xlab = "Global Active Power (kilowatts)", main = "Global Active Power", max_width=480
)
hist(data[,"Global_active_power"], xlab = "Global Active Power (kilowatts)", main = "Global Active Power")
png(filename="name.png")
hist(data[,"Global_active_power"], xlab = "Global Active Power (kilowatts)", main = "Global Active Power")
dev.off()
getwd()
setwd("/Users/evgeny/sourceCode/DataScientistCourse/course4/ExData_Plotting1/")
png(filename="plot1.png")
hist(data[,"Global_active_power"], xlab = "Global Active Power (kilowatts)", main = "Global Active Power")
dev.off()
hist(data[,"Global_active_power"], xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "red")
source("/Users/evgeny/sourceCode/DataScientistCourse/course4/ExData_Plotting1/plot1.R")
lines(data[,"Global_active_power"])
weekdays(data[,"Date"])
weekdays(data[,"Date"], T)
table(weekdays(data[,"Date"], T))
plot(weekdays(data[,"Date"], T), data[,"Global_active_power"])
plot(data[,"Time"], data[,"Global_active_power"])
lines(data[,"Time"], data[,"Global_active_power"])
lines(data[,"Time"], data[,"Global_active_power"])
plot(data[,"Time"], data[,"Global_active_power"])
?plot
plot(data[,"Time"], data[,"Global_active_power"], type="l")
plot(data[,"Time"], data[,"Global_active_power"], type="p")
plot(data[,"Time"], data[,"Global_active_power"], type="b")
plot(data[,"Time"], data[,"Global_active_power"], type="c")
plot(data[,"Time"], data[,"Global_active_power"], type="o")
plot(data[,"Time"], data[,"Global_active_power"], type="h")
plot(data[,"Time"], data[,"Global_active_power"], type="s")
plot(data[,"Time"], data[,"Global_active_power"], type="S")
plot(data[,"Time"], data[,"Global_active_power"], type="n")
View(data)
data=read.csv.sql("/Users/evgeny/Downloads/household_power_consumption.txt", sep = ";",
""
)
data=read.csv.sql("/Users/evgeny/Downloads/household_power_consumption.txt", sep = ";",
sql = "select * from file where Date == '1/2/2007' or Date == '2/2/2007'",  eol = "\n")
?strptime
